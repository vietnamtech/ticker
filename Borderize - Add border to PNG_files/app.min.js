let borderProps, textCanvas, imageCanvas, webGLCanvas, waitToUpdate = 400;
const kernelSize = 5;
let textModeEnabled = !1, currentUpdateTimeout;
function init() {
    borderProps = new BorderProperties(4,2,[255, 255, 255],[0, 0, 0],170,.2),
    textCanvas = new CanvasText("",120,"comic-sans","#000000","center",.5),
    webGLCanvas = new CanvasWebGL("canvas"),
    imageCanvas = new CanvasImage;
    let fontSelect = document.getElementById("font");
    fonts.forEach(font=>{
        let option = document.createElement("option");
        option.value = font,
        option.text = font,
        option.style = "font-family: " + font + ";",
        fontSelect.appendChild(option)
    }
    ),
    textInput = document.getElementById("font-input"),
    WebFont.load({
        google: {
            families: fonts
        },
        active: function() {
            textCanvas.text = "Loaded",
            font = fonts[0],
            textInput.value = textCanvas.text,
            textInput.disabled = !1,
            draw(),
            console.log("All loaded")
        },
        loading: function() {
            textCanvas.text = "Loading Fonts",
            textInput.value = textCanvas.text,
            textInput.disabled = !0,
            draw(),
            console.log("The fonts are loading")
        }
    }),
    console.log("inicio correcto")
}
function draw() {
    let imageWidth;
    document.getElementById("download").disabled = !0,
    textModeEnabled ? (textCanvas.drawText(borderProps.extraSize, 5),
    webGLCanvas.draw(textCanvas.canvas, borderProps)) : (imageCanvas.drawImage(borderProps.extraSize, 5),
    webGLCanvas.draw(imageCanvas.canvas, borderProps)),
    document.getElementById("download").disabled = !1,
    document.getElementById("canvas").style.width = "100%"
}
function onInputChange(name, value) {
    let changed = !1;
    if ("lineSeparation" == name) {
        let oldValue, currentValue;
        changed = textCanvas.interLineSeparation != (textCanvas.interLineSeparation = parseFloat(value))
    } else if ("text-align" == name) {
        let oldValue, currentValue;
        changed = textCanvas.textAlign != (textCanvas.textAlign = value)
    } else if ("fontSize" === name) {
        let oldValue, currentValue;
        changed = textCanvas.fontSize != (textCanvas.fontSize = parseInt(value))
    } else if ("fontColor" === name) {
        let oldValue, currentValue;
        changed = textCanvas.color != (textCanvas.color = value)
    } else if ("borderSize" === name) {
        let oldValue, currentValue;
        changed = borderProps.borderSize != (borderProps.borderSize = parseInt(value))
    } else if ("borderColor" === name) {
        let borderColor = [0, 0, 0];
        copyColor(value, borderColor);
        let oldValue = borderProps.borderColor, currentValue;
        changed = (borderProps.borderColor = borderColor).reduce((previous,current,index)=>previous || current === oldValue[index], !0)
    } else if ("shadowSize" === name) {
        let oldValue, currentValue;
        changed = borderProps.shadowSize != (borderProps.shadowSize = parseInt(value))
    } else if ("shadowColor" === name) {
        let shadowColor = [0, 0, 0];
        copyColor(value, shadowColor);
        let oldValue = borderProps.shadowColor, currentValue;
        changed = (borderProps.shadowColor = shadowColor).reduce((previous,current,index)=>previous || current === oldValue[index], !0)
    } else if ("shadowAlpha" == name) {
        let oldValue, currentValue;
        changed = borderProps.shadowAlpha != (borderProps.shadowAlpha = parseInt(value))
    } else if ("font" == name) {
        let oldValue, currentValue;
        changed = textCanvas.fontName != (textCanvas.fontName = value)
    } else if ("shadowBlurStrength" == name) {
        let oldValue, currentValue;
        changed = borderProps.shadowBlurStrength != (borderProps.shadowBlurStrength = parseFloat(value))
    } else if ("appMode" == name)
        changeAppMode(value);
    else if ("alphaTreshold" == name) {
        let oldValue, currentValue;
        changed = webGLCanvas.treshold != (webGLCanvas.treshold = parseFloat(value))
    }
    changed && update()
}
function changeText(newText) {
    let oldValue, currentValue;
    textCanvas.text !== (textCanvas.text = newText) && update()
}
function update() {
    clearTimeout(currentUpdateTimeout),
    currentUpdateTimeout = setTimeout(()=>{
        draw()
    }
    , waitToUpdate)
}
function hexToRgb(hex) {
    var bigint = parseInt(hex.substring(1), 16), r, g, b;
    return [bigint >> 16 & 255, bigint >> 8 & 255, 255 & bigint]
}
function copyColor(hexColor, toCopy) {
    let color = hexToRgb(hexColor);
    for (let i = 0; i < 3; i++)
        toCopy[i] = color[i];
    return toCopy
}
function startDownload() {
    setTimeout(download, 1e3)
}
function startDownloadImageDetail() {
    setTimeout(downloadImageDetail, 1e3)
}
function downloadImageDetail() {
    var image = document.getElementById("image-detail")
      , imageURL = image.getAttribute("data-original-image-url")
      , title = image.getAttribute("data-title")
      , link = document.createElement("a");
    link.download = title + ".png",
    link.href = imageURL,
    link.click(),
    image.disabled = !0
}
function download() {
    let image = document.getElementById("canvas").toDataURL();
    var link = document.createElement("a");
    link.download = "my-image.png",
    link.href = image,
    link.click(),
    document.getElementById("download").disabled = !0
}
function changeAppMode(mode) {
    let textControls = document.getElementById("text-mode-controls")
      , imageControls = document.getElementById("image-mode-controls");
    "text" === mode ? (textControls.hidden = !1,
    imageControls.hidden = !0,
    textModeEnabled = !0) : (textControls.hidden = !0,
    imageControls.hidden = !1,
    textModeEnabled = !1),
    draw()
}
function onImageChange(event) {
    const file = event.target.files[0];
    if (file.type.match("image.*")) {
        let reader = new FileReader;
        reader.onload = event=>{
            if (event.target.readyState == FileReader.DONE) {
                let image = new Image;
                image.onload = () => {
                    imageCanvas.loadImage(image),
                    draw()
                }
                ,
                image.src = event.target.result
            }
        }
        ,
        reader.readAsDataURL(file)
    }
}
function changeBackground(color) {
    let background;
    document.getElementById("canvas-container").style.backgroundColor = color
}
init();
